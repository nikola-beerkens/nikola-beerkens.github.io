name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  WORKDIR: thesis  # <-- your subfolder

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager (in $WORKDIR)
        id: detect
        run: |
          if [ -f "${{ github.workspace }}/${{ env.WORKDIR }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/${{ env.WORKDIR }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "No package.json in $WORKDIR"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect.outputs.manager }}
          cache-dependency-path: |
            ${{ env.WORKDIR }}/package-lock.json
            ${{ env.WORKDIR }}/yarn.lock

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: Restore Next cache
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKDIR }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles(format('{0}/package-lock.json', env.WORKDIR), format('{0}/yarn.lock', env.WORKDIR)) }}-${{ hashFiles(format('{0}/**.[jt]s', env.WORKDIR), format('{0}/**.[jt]sx', env.WORKDIR)) }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles(format('{0}/package-lock.json', env.WORKDIR), format('{0}/yarn.lock', env.WORKDIR)) }}-

      - name: Install dependencies
        working-directory: ${{ env.WORKDIR }}
        run: ${{ steps.detect.outputs.manager }} ${{ steps.detect.outputs.command }}

      - name: Build & Export
        working-directory: ${{ env.WORKDIR }}
        run: ${{ steps.detect.outputs.runner }} next build

      - name: Upload artifact (static site)
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.WORKDIR }}/out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
